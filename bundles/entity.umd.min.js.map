{"version":3,"sources":["../../../modules/entity/src/entity_state.ts","../../../modules/entity/src/state_selectors.ts","../../../modules/entity/src/state_adapter.ts","../../../modules/entity/src/unsorted_state_adapter.ts","../../../modules/entity/src/sorted_state_adapter.ts","../../../modules/entity/src/create_adapter.ts"],"names":["getInitialEntityState","ids","entities","createInitialStateFactory","getInitialState","additionalState","Object","assign","createSelectorsFactory","getSelectors","selectState","selectIds","state","selectEntities","selectAll","createSelector","map","id","selectTotal","length","createStateOperator","mutator","arg","clonedEntityState","slice","createUnsortedStateAdapter","selectId","addOneMutably","entity","key","push","addManyMutably","didMutate","index","addAllMutably","removeOneMutably","removeManyMutably","keys","filter","removeAll","takeNewKey","update","original","updated","changes","newKey","updateOneMutably","updateManyMutably","updates","newKeys","addOne","addMany","addAll","updateOne","updateMany","removeOne","removeMany","createSortedStateAdapter","sort","newModels","merge","model","models","takeUpdatedModel","forEach","i","j","modelId","entityId","concat","_a","createEntityAdapter","options","sortComparer","instance","stateFactory","selectorsFactory","stateAdapter"],"mappings":"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","file":"./dist/entity/bundles/entity.umd.min.js","sourcesContent":["import { EntityState } from './models';\n/**\n * @template V\n * @return {?}\n */\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n/**\n * @template V\n * @return {?}\n */\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n/**\n * @param {?=} additionalState\n * @return {?}\n */\nfunction getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors } from './models';\n/**\n * @template T\n * @return {?}\n */\nexport function createSelectorsFactory<T>() {\n  return {\n/**\n * @template V\n * @param {?} selectState\n * @return {?}\n */\ngetSelectors<V>(\n      selectState: (state: V) => EntityState<T>\n    ): EntitySelectors<T, V> {\n      const /** @type {?} */ selectIds = (state: EntityState<T>) => state.ids;\n      const /** @type {?} */ selectEntities = (state: EntityState<T>) => state.entities;\n      const /** @type {?} */ selectAll = createSelector(\n        selectIds,\n        selectEntities,\n        (ids, entities) => ids.map(id => entities[id])\n      );\n\n      const /** @type {?} */ selectTotal = createSelector(selectIds, ids => ids.length);\n\n      return {\n        selectIds: createSelector(selectState, selectIds),\n        selectEntities: createSelector(selectState, selectEntities),\n        selectAll: createSelector(selectState, selectAll),\n        selectTotal: createSelector(selectState, selectTotal),\n      };\n    },\n  };\n}\n","import { EntityState, EntityStateAdapter } from './models';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => boolean\n) {\n  return function operation<S extends EntityState<V>>(arg: R, state: S): S {\n    const /** @type {?} */ clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const /** @type {?} */ didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    return state;\n  };\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models';\nimport { createStateOperator } from './state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(entities: T[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in entities) {\n      didMutate = addOneMutably(entities[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(entities: T[], state: R): boolean {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return true;\n  }\n/**\n * @param {?} key\n * @param {?} state\n * @return {?}\n */\nfunction removeOneMutably(key: string, state: R): boolean {\n    return removeManyMutably([key], state);\n  }\n/**\n * @param {?} keys\n * @param {?} state\n * @return {?}\n */\nfunction removeManyMutably(keys: string[], state: R): boolean {\n    const /** @type {?} */ didMutate =\n      keys\n        .filter(key => key in state.entities)\n        .map(key => delete state.entities[key]).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.filter(id => id in state.entities);\n    }\n\n    return didMutate;\n  }\n/**\n * @template S\n * @param {?} state\n * @return {?}\n */\nfunction removeAll<S extends R>(state: S): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n/**\n * @param {?} keys\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction takeNewKey(\n    keys: { [id: string]: string },\n    update: Update<T>,\n    state: R\n  ): void {\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ newKey = selectId(updated);\n\n    if (newKey !== update.id) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    return updateManyMutably([update], state);\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    const /** @type {?} */ newKeys: { [id: string]: string } = {};\n\n    const /** @type {?} */ didMutate =\n      updates\n        .filter(update => update.id in state.entities)\n        .map(update => takeNewKey(newKeys, update, state)).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.map(id => newKeys[id] || id);\n    }\n\n    return didMutate;\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  Dictionary,\n  EntityStateAdapter,\n  Update,\n} from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    return addManyMutably([entity], state);\n  }\n/**\n * @param {?} newModels\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(newModels: T[], state: R): boolean {\n    const /** @type {?} */ models = newModels.filter(\n      model => !(selectId(model) in state.entities)\n    );\n\n    return merge(models, state);\n  }\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(models: T[], state: R): boolean {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return true;\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    return updateManyMutably([update], state);\n  }\n/**\n * @param {?} models\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction takeUpdatedModel(models: T[], update: Update<T>, state: R): void {\n    if (!(update.id in state.entities)) {\n      return;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated = Object.assign({}, original, update.changes);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    const /** @type {?} */ models: T[] = [];\n\n    updates.forEach(update => takeUpdatedModel(models, update, state));\n\n    if (models.length) {\n      state.ids = state.ids.filter(id => id in state.entities);\n    }\n\n    return merge(models, state);\n  }\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction merge(models: T[], state: R): boolean {\n    if (models.length === 0) {\n      return false;\n    }\n\n    models.sort(sort);\n\n    const /** @type {?} */ ids: string[] = [];\n\n    let /** @type {?} */ i = 0;\n    let /** @type {?} */ j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const /** @type {?} */ model = models[i];\n      const /** @type {?} */ modelId = selectId(model);\n      const /** @type {?} */ entityId = state.ids[j];\n      const /** @type {?} */ entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n\n    return true;\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options,\n  };\n\n  const /** @type {?} */ stateFactory = createInitialStateFactory<T>();\n  const /** @type {?} */ selectorsFactory = createSelectorsFactory<T>();\n  const /** @type {?} */ stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n"]}