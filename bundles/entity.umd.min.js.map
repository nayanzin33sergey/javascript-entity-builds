{"version":3,"sources":["../../../modules/entity/src/entity_state.ts","../../../modules/entity/src/state_selectors.ts","../../../modules/entity/src/state_adapter.ts","../../../modules/entity/src/unsorted_state_adapter.ts","../../../modules/entity/src/sorted_state_adapter.ts","../../../modules/entity/src/create_adapter.ts"],"names":["getInitialEntityState","ids","entities","createInitialStateFactory","getInitialState","additionalState","Object","assign","createSelectorsFactory","getSelectors","selectState","selectIds","state","selectEntities","selectAll","createSelector","map","id","selectTotal","length","createStateOperator","mutator","arg","clonedEntityState","slice","createUnsortedStateAdapter","selectId","addOneMutably","entity","key","push","addManyMutably","didMutate","index","addAllMutably","removeOneMutably","indexOf","splice","removeManyMutably","keys","removeAll","updateOneMutably","update","original","updated","changes","newKey","updateManyMutably","updates","addOne","addMany","addAll","updateOne","updateMany","removeOne","removeMany","createSortedStateAdapter","sort","insertAt","findTargetIndex","newModels","models","sortedModels","model","updatedKey","index_1","i","_a","createEntityAdapter","options","sortComparer","stateFactory","selectorsFactory","stateAdapter"],"mappings":"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","file":"./dist/entity/bundles/entity.umd.min.js","sourcesContent":["import { EntityState } from './models';\n/**\n * @template V\n * @return {?}\n */\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n/**\n * @template V\n * @return {?}\n */\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n/**\n * @param {?=} additionalState\n * @return {?}\n */\nfunction getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors } from './models';\n/**\n * @template T\n * @return {?}\n */\nexport function createSelectorsFactory<T>() {\n  return {\n/**\n * @template V\n * @param {?} selectState\n * @return {?}\n */\ngetSelectors<V>(\n      selectState: (state: V) => EntityState<T>\n    ): EntitySelectors<T, V> {\n      const /** @type {?} */ selectIds = (state: EntityState<T>) => state.ids;\n      const /** @type {?} */ selectEntities = (state: EntityState<T>) => state.entities;\n      const /** @type {?} */ selectAll = createSelector(\n        selectIds,\n        selectEntities,\n        (ids, entities) => ids.map(id => entities[id])\n      );\n\n      const /** @type {?} */ selectTotal = createSelector(selectIds, ids => ids.length);\n\n      return {\n        selectIds: createSelector(selectState, selectIds),\n        selectEntities: createSelector(selectState, selectEntities),\n        selectAll: createSelector(selectState, selectAll),\n        selectTotal: createSelector(selectState, selectTotal),\n      };\n    },\n  };\n}\n","import { EntityState, EntityStateAdapter } from './models';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => boolean\n) {\n  return function operation<S extends EntityState<V>>(arg: R, state: S): S {\n    const /** @type {?} */ clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const /** @type {?} */ didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    return state;\n  };\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models';\nimport { createStateOperator } from './state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(entities: T[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in entities) {\n      didMutate = addOneMutably(entities[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(entities: T[], state: R): boolean {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return true;\n  }\n/**\n * @param {?} key\n * @param {?} state\n * @return {?}\n */\nfunction removeOneMutably(key: string, state: R): boolean {\n    const /** @type {?} */ index = state.ids.indexOf(key);\n\n    if (index === -1) {\n      return false;\n    }\n\n    state.ids.splice(index, 1);\n    delete state.entities[key];\n\n    return true;\n  }\n/**\n * @param {?} keys\n * @param {?} state\n * @return {?}\n */\nfunction removeManyMutably(keys: string[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in keys) {\n      didMutate = removeOneMutably(keys[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @template S\n * @param {?} state\n * @return {?}\n */\nfunction removeAll<S extends R>(state: S): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    const /** @type {?} */ index = state.ids.indexOf(update.id);\n\n    if (index === -1) {\n      return false;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ newKey = selectId(updated);\n\n    if (newKey !== update.id) {\n      state.ids[index] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return true;\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in updates) {\n      didMutate = updateOneMutably(updates[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  Dictionary,\n  EntityStateAdapter,\n  Update,\n} from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    const /** @type {?} */ insertAt = findTargetIndex(state, entity);\n    state.ids.splice(insertAt, 0, key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n/**\n * @param {?} newModels\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(newModels: T[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in newModels) {\n      didMutate = addOneMutably(newModels[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(models: T[], state: R): boolean {\n    const /** @type {?} */ sortedModels = models.sort(sort);\n\n    state.entities = {};\n    state.ids = sortedModels.map(model => {\n      const /** @type {?} */ id = selectId(model);\n      state.entities[id] = model;\n      return id;\n    });\n\n    return true;\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ updatedKey = selectId(updated);\n    const /** @type {?} */ result = sort(original, updated);\n\n    if (result === 0) {\n      if (updatedKey !== update.id) {\n        delete state.entities[update.id];\n        const /** @type {?} */ index = state.ids.indexOf(update.id);\n        state.ids[index] = updatedKey;\n      }\n\n      state.entities[updatedKey] = updated;\n\n      return true;\n    }\n\n    const /** @type {?} */ index = state.ids.indexOf(update.id);\n    state.ids.splice(index, 1);\n    state.ids.splice(findTargetIndex(state, updated), 0, updatedKey);\n\n    if (updatedKey !== update.id) {\n      delete state.entities[update.id];\n    }\n\n    state.entities[updatedKey] = updated;\n\n    return true;\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in updates) {\n      didMutate = updateOneMutably(updates[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} state\n * @param {?} model\n * @return {?}\n */\nfunction findTargetIndex(state: R, model: T) {\n    if (state.ids.length === 0) {\n      return 0;\n    }\n\n    for (let /** @type {?} */ i = 0; i < state.ids.length; i++) {\n      const /** @type {?} */ entity = state.entities[state.ids[i]];\n      const /** @type {?} */ isSmaller = sort(model, entity) < 0;\n\n      if (isSmaller) {\n        return i;\n      }\n    }\n\n    return state.ids.length - 1;\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} options\n * @return {?}\n */\nexport function createEntityAdapter<T>(options: {\n  selectId: IdSelector<T>;\n  sortComparer?: false | Comparer<T>;\n}): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    ...options,\n  };\n\n  const /** @type {?} */ stateFactory = createInitialStateFactory<T>();\n  const /** @type {?} */ selectorsFactory = createSelectorsFactory<T>();\n  const /** @type {?} */ stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n"]}