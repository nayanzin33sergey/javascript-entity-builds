{"version":3,"sources":["../../../modules/entity/src/entity_state.ts","../../../modules/entity/src/state_selectors.ts","../../../modules/entity/src/state_adapter.ts","../../../modules/entity/src/unsorted_state_adapter.ts","../../../modules/entity/src/sorted_state_adapter.ts","../../../modules/entity/src/create_adapter.ts"],"names":["getInitialEntityState","ids","entities","createInitialStateFactory","getInitialState","additionalState","Object","assign","createSelectorsFactory","getSelectors","selectState","selectIds","state","selectEntities","selectAll","createSelector","map","id","selectTotal","length","createStateOperator","mutator","arg","clonedEntityState","slice","createUnsortedStateAdapter","selectId","addOneMutably","entity","key","indexOf","push","addManyMutably","index","addAllMutably","removeOneMutably","splice","removeManyMutably","keys","removeAll","updateOneMutably","update","original","updated","changes","newKey","updateManyMutably","updates","addOne","addMany","addAll","updateOne","updateMany","removeOne","removeMany","createSortedStateAdapter","sort","insertAt","findTargetIndex","newModels","models","sortedModels","model","updatedKey","left","right","middle","Math","floor","result","_a","createEntityAdapter","options","stateFactory","selectorsFactory","stateAdapter"],"mappings":"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","file":"./dist/entity/bundles/entity.umd.min.js","sourcesContent":["import { EntityState } from './models';\n/**\n * @template V\n * @return {?}\n */\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n/**\n * @template V\n * @return {?}\n */\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n/**\n * @param {?=} additionalState\n * @return {?}\n */\nfunction getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors } from './models';\n/**\n * @template T\n * @return {?}\n */\nexport function createSelectorsFactory<T>() {\n  return {\n/**\n * @template V\n * @param {?} selectState\n * @return {?}\n */\ngetSelectors<V>(\n      selectState: (state: V) => EntityState<T>\n    ): EntitySelectors<T, V> {\n      const /** @type {?} */ selectIds = (state: EntityState<T>) => state.ids;\n      const /** @type {?} */ selectEntities = (state: EntityState<T>) => state.entities;\n      const /** @type {?} */ selectAll = createSelector(\n        selectIds,\n        selectEntities,\n        (ids, entities) => ids.map(id => entities[id])\n      );\n\n      const /** @type {?} */ selectTotal = createSelector(selectIds, ids => ids.length);\n\n      return {\n        selectIds: createSelector(selectState, selectIds),\n        selectEntities: createSelector(selectState, selectEntities),\n        selectAll: createSelector(selectState, selectAll),\n        selectTotal: createSelector(selectState, selectTotal),\n      };\n    },\n  };\n}\n","import { EntityState, EntityStateAdapter } from './models';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => void\n) {\n  return function operation<S extends EntityState<V>>(arg: R, state: S): S {\n    const /** @type {?} */ clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    mutator(arg, clonedEntityState);\n\n    return Object.assign({}, state, clonedEntityState);\n  };\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models';\nimport { createStateOperator } from './state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): void {\n    const /** @type {?} */ key = selectId(entity);\n    const /** @type {?} */ index = state.ids.indexOf(key);\n\n    if (index !== -1) {\n      return;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(entities: T[], state: R): void {\n    for (let /** @type {?} */ index in entities) {\n      addOneMutably(entities[index], state);\n    }\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(entities: T[], state: R): void {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n  }\n/**\n * @param {?} key\n * @param {?} state\n * @return {?}\n */\nfunction removeOneMutably(key: string, state: R): void {\n    const /** @type {?} */ index = state.ids.indexOf(key);\n\n    if (index === -1) {\n      return;\n    }\n\n    state.ids.splice(index, 1);\n    delete state.entities[key];\n  }\n/**\n * @param {?} keys\n * @param {?} state\n * @return {?}\n */\nfunction removeManyMutably(keys: string[], state: R): void {\n    for (let /** @type {?} */ index in keys) {\n      removeOneMutably(keys[index], state);\n    }\n  }\n/**\n * @template S\n * @param {?} state\n * @return {?}\n */\nfunction removeAll<S extends R>(state: S): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): void {\n    const /** @type {?} */ index = state.ids.indexOf(update.id);\n\n    if (index === -1) {\n      return;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ newKey = selectId(updated);\n\n    if (newKey !== update.id) {\n      state.ids[index] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): void {\n    for (let /** @type {?} */ index in updates) {\n      updateOneMutably(updates[index], state);\n    }\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  Dictionary,\n  EntityStateAdapter,\n  Update,\n} from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): void {\n    const /** @type {?} */ key = selectId(entity);\n    const /** @type {?} */ index = state.ids.indexOf(key);\n\n    if (index !== -1) {\n      return;\n    }\n\n    const /** @type {?} */ insertAt = findTargetIndex(state, entity);\n    state.ids.splice(insertAt, 0, key);\n    state.entities[key] = entity;\n  }\n/**\n * @param {?} newModels\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(newModels: T[], state: R): void {\n    for (let /** @type {?} */ index in newModels) {\n      addOneMutably(newModels[index], state);\n    }\n  }\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(models: T[], state: R): void {\n    const /** @type {?} */ sortedModels = models.sort(sort);\n\n    state.entities = {};\n    state.ids = sortedModels.map(model => {\n      const /** @type {?} */ id = selectId(model);\n      state.entities[id] = model;\n      return id;\n    });\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): void {\n    const /** @type {?} */ index = state.ids.indexOf(update.id);\n\n    if (index === -1) {\n      return;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ updatedKey = selectId(updated);\n    const /** @type {?} */ result = sort(original, updated);\n\n    if (result === 0) {\n      if (updatedKey !== update.id) {\n        delete state.entities[update.id];\n        state.ids[index] = updatedKey;\n      }\n\n      state.entities[updatedKey] = updated;\n\n      return;\n    }\n\n    state.ids.splice(index, 1);\n    state.ids.splice(findTargetIndex(state, updated), 0, updatedKey);\n\n    if (updatedKey !== update.id) {\n      delete state.entities[update.id];\n    }\n\n    state.entities[updatedKey] = updated;\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): void {\n    for (let /** @type {?} */ index in updates) {\n      updateOneMutably(updates[index], state);\n    }\n  }\n/**\n * @param {?} state\n * @param {?} model\n * @param {?=} left\n * @param {?=} right\n * @return {?}\n */\nfunction findTargetIndex(\n    state: R,\n    model: T,\n    left = 0,\n    right = state.ids.length - 1\n  ) {\n    if (right === -1) {\n      return 0;\n    }\n\n    let /** @type {?} */ middle: number;\n\n    while (true) {\n      middle = Math.floor((left + right) / 2);\n\n      const /** @type {?} */ result = sort(state.entities[state.ids[middle]], model);\n\n      if (result === 0) {\n        return middle;\n      } else if (result < 0) {\n        left = middle + 1;\n      } else {\n        right = middle - 1;\n      }\n\n      if (left > right) {\n        return state.ids.length - 1;\n      }\n    }\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} options\n * @return {?}\n */\nexport function createEntityAdapter<T>(options: {\n  selectId: IdSelector<T>;\n  sort?: false | Comparer<T>;\n}): EntityAdapter<T> {\n  const { selectId, sort }: EntityDefinition<T> = { sort: false, ...options };\n\n  const /** @type {?} */ stateFactory = createInitialStateFactory<T>();\n  const /** @type {?} */ selectorsFactory = createSelectorsFactory<T>();\n  const /** @type {?} */ stateAdapter = sort\n    ? createSortedStateAdapter(selectId, sort)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n"]}