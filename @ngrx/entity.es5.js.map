{"version":3,"file":"entity.es5.js","sources":["../../../modules/entity/index.ts","../../../modules/entity/src/create_adapter.ts","../../../modules/entity/src/sorted_state_adapter.ts","../../../modules/entity/src/unsorted_state_adapter.ts","../../../modules/entity/src/state_adapter.ts","../../../modules/entity/src/state_selectors.ts","../../../modules/entity/src/entity_state.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {createEntityAdapter,EntityState,EntityAdapter} from './public_api';\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} options\n * @return {?}\n */\nexport function createEntityAdapter<T>(options: {\n  selectId: IdSelector<T>;\n  sort?: false | Comparer<T>;\n}): EntityAdapter<T> {\n  const { selectId, sort }: EntityDefinition<T> = { sort: false, ...options };\n\n  const /** @type {?} */ stateFactory = createInitialStateFactory<T>();\n  const /** @type {?} */ selectorsFactory = createSelectorsFactory<T>();\n  const /** @type {?} */ stateAdapter = sort\n    ? createSortedStateAdapter(selectId, sort)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  Dictionary,\n  EntityStateAdapter,\n  Update,\n} from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    const /** @type {?} */ insertAt = findTargetIndex(state, entity);\n    state.ids.splice(insertAt, 0, key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n/**\n * @param {?} newModels\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(newModels: T[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in newModels) {\n      didMutate = addOneMutably(newModels[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(models: T[], state: R): boolean {\n    const /** @type {?} */ sortedModels = models.sort(sort);\n\n    state.entities = {};\n    state.ids = sortedModels.map(model => {\n      const /** @type {?} */ id = selectId(model);\n      state.entities[id] = model;\n      return id;\n    });\n\n    return true;\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ updatedKey = selectId(updated);\n    const /** @type {?} */ result = sort(original, updated);\n\n    if (result === 0) {\n      if (updatedKey !== update.id) {\n        delete state.entities[update.id];\n        const /** @type {?} */ index = state.ids.indexOf(update.id);\n        state.ids[index] = updatedKey;\n      }\n\n      state.entities[updatedKey] = updated;\n\n      return true;\n    }\n\n    const /** @type {?} */ index = state.ids.indexOf(update.id);\n    state.ids.splice(index, 1);\n    state.ids.splice(findTargetIndex(state, updated), 0, updatedKey);\n\n    if (updatedKey !== update.id) {\n      delete state.entities[update.id];\n    }\n\n    state.entities[updatedKey] = updated;\n\n    return true;\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in updates) {\n      didMutate = updateOneMutably(updates[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} state\n * @param {?} model\n * @return {?}\n */\nfunction findTargetIndex(state: R, model: T) {\n    if (state.ids.length === 0) {\n      return 0;\n    }\n\n    for (let /** @type {?} */ i = 0; i < state.ids.length; i++) {\n      const /** @type {?} */ entity = state.entities[state.ids[i]];\n      const /** @type {?} */ isSmaller = sort(model, entity) < 0;\n\n      if (isSmaller) {\n        return i;\n      }\n    }\n\n    return state.ids.length - 1;\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models';\nimport { createStateOperator } from './state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(entities: T[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in entities) {\n      didMutate = addOneMutably(entities[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(entities: T[], state: R): boolean {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return true;\n  }\n/**\n * @param {?} key\n * @param {?} state\n * @return {?}\n */\nfunction removeOneMutably(key: string, state: R): boolean {\n    const /** @type {?} */ index = state.ids.indexOf(key);\n\n    if (index === -1) {\n      return false;\n    }\n\n    state.ids.splice(index, 1);\n    delete state.entities[key];\n\n    return true;\n  }\n/**\n * @param {?} keys\n * @param {?} state\n * @return {?}\n */\nfunction removeManyMutably(keys: string[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in keys) {\n      didMutate = removeOneMutably(keys[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @template S\n * @param {?} state\n * @return {?}\n */\nfunction removeAll<S extends R>(state: S): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    const /** @type {?} */ index = state.ids.indexOf(update.id);\n\n    if (index === -1) {\n      return false;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ newKey = selectId(updated);\n\n    if (newKey !== update.id) {\n      state.ids[index] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return true;\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in updates) {\n      didMutate = updateOneMutably(updates[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter } from './models';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => boolean\n) {\n  return function operation<S extends EntityState<V>>(arg: R, state: S): S {\n    const /** @type {?} */ clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const /** @type {?} */ didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    return state;\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors } from './models';\n/**\n * @template T\n * @return {?}\n */\nexport function createSelectorsFactory<T>() {\n  return {\n/**\n * @template V\n * @param {?} selectState\n * @return {?}\n */\ngetSelectors<V>(\n      selectState: (state: V) => EntityState<T>\n    ): EntitySelectors<T, V> {\n      const /** @type {?} */ selectIds = (state: EntityState<T>) => state.ids;\n      const /** @type {?} */ selectEntities = (state: EntityState<T>) => state.entities;\n      const /** @type {?} */ selectAll = createSelector(\n        selectIds,\n        selectEntities,\n        (ids, entities) => ids.map(id => entities[id])\n      );\n\n      const /** @type {?} */ selectTotal = createSelector(selectIds, ids => ids.length);\n\n      return {\n        selectIds: createSelector(selectState, selectIds),\n        selectEntities: createSelector(selectState, selectEntities),\n        selectAll: createSelector(selectState, selectAll),\n        selectTotal: createSelector(selectState, selectTotal),\n      };\n    },\n  };\n}\n","import { EntityState } from './models';\n/**\n * @template V\n * @return {?}\n */\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n/**\n * @template V\n * @return {?}\n */\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n/**\n * @param {?=} additionalState\n * @return {?}\n */\nfunction getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n"],"names":[],"mappings":"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"}