{"version":3,"file":"entity.js","sources":["../../../modules/entity/index.ts","../../../modules/entity/src/create_adapter.ts","../../../modules/entity/src/sorted_state_adapter.ts","../../../modules/entity/src/unsorted_state_adapter.ts","../../../modules/entity/src/state_adapter.ts","../../../modules/entity/src/state_selectors.ts","../../../modules/entity/src/entity_state.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {createEntityAdapter,EntityState,EntityAdapter} from './public_api';\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options,\n  };\n\n  const /** @type {?} */ stateFactory = createInitialStateFactory<T>();\n  const /** @type {?} */ selectorsFactory = createSelectorsFactory<T>();\n  const /** @type {?} */ stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  Dictionary,\n  EntityStateAdapter,\n  Update,\n} from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    return addManyMutably([entity], state);\n  }\n/**\n * @param {?} newModels\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(newModels: T[], state: R): boolean {\n    const /** @type {?} */ models = newModels.filter(\n      model => !(selectId(model) in state.entities)\n    );\n\n    return merge(models, state);\n  }\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(models: T[], state: R): boolean {\n    state.entities = {};\n    state.ids = [];\n\n    addManyMutably(models, state);\n\n    return true;\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    return updateManyMutably([update], state);\n  }\n/**\n * @param {?} models\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction takeUpdatedModel(models: T[], update: Update<T>, state: R): void {\n    if (!(update.id in state.entities)) {\n      return;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated = Object.assign({}, original, update.changes);\n\n    delete state.entities[update.id];\n\n    models.push(updated);\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    const /** @type {?} */ models: T[] = [];\n\n    updates.forEach(update => takeUpdatedModel(models, update, state));\n\n    if (models.length) {\n      state.ids = state.ids.filter(id => id in state.entities);\n    }\n\n    return merge(models, state);\n  }\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction merge(models: T[], state: R): boolean {\n    if (models.length === 0) {\n      return false;\n    }\n\n    models.sort(sort);\n\n    const /** @type {?} */ ids: string[] = [];\n\n    let /** @type {?} */ i = 0;\n    let /** @type {?} */ j = 0;\n\n    while (i < models.length && j < state.ids.length) {\n      const /** @type {?} */ model = models[i];\n      const /** @type {?} */ modelId = selectId(model);\n      const /** @type {?} */ entityId = state.ids[j];\n      const /** @type {?} */ entity = state.entities[entityId];\n\n      if (sort(model, entity) <= 0) {\n        ids.push(modelId);\n        i++;\n      } else {\n        ids.push(entityId);\n        j++;\n      }\n    }\n\n    if (i < models.length) {\n      state.ids = ids.concat(models.slice(i).map(selectId));\n    } else {\n      state.ids = ids.concat(state.ids.slice(j));\n    }\n\n    models.forEach((model, i) => {\n      state.entities[selectId(model)] = model;\n    });\n\n    return true;\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models';\nimport { createStateOperator } from './state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(entities: T[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in entities) {\n      didMutate = addOneMutably(entities[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(entities: T[], state: R): boolean {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return true;\n  }\n/**\n * @param {?} key\n * @param {?} state\n * @return {?}\n */\nfunction removeOneMutably(key: string, state: R): boolean {\n    return removeManyMutably([key], state);\n  }\n/**\n * @param {?} keys\n * @param {?} state\n * @return {?}\n */\nfunction removeManyMutably(keys: string[], state: R): boolean {\n    const /** @type {?} */ didMutate =\n      keys\n        .filter(key => key in state.entities)\n        .map(key => delete state.entities[key]).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.filter(id => id in state.entities);\n    }\n\n    return didMutate;\n  }\n/**\n * @template S\n * @param {?} state\n * @return {?}\n */\nfunction removeAll<S extends R>(state: S): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n/**\n * @param {?} keys\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction takeNewKey(\n    keys: { [id: string]: string },\n    update: Update<T>,\n    state: R\n  ): void {\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ newKey = selectId(updated);\n\n    if (newKey !== update.id) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    return updateManyMutably([update], state);\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    const /** @type {?} */ newKeys: { [id: string]: string } = {};\n\n    const /** @type {?} */ didMutate =\n      updates\n        .filter(update => update.id in state.entities)\n        .map(update => takeNewKey(newKeys, update, state)).length > 0;\n\n    if (didMutate) {\n      state.ids = state.ids.map(id => newKeys[id] || id);\n    }\n\n    return didMutate;\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter } from './models';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => boolean\n) {\n  return function operation<S extends EntityState<V>>(arg: R, state: S): S {\n    const /** @type {?} */ clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const /** @type {?} */ didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    return state;\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors } from './models';\n/**\n * @template T\n * @return {?}\n */\nexport function createSelectorsFactory<T>() {\n  return {\n/**\n * @template V\n * @param {?} selectState\n * @return {?}\n */\ngetSelectors<V>(\n      selectState: (state: V) => EntityState<T>\n    ): EntitySelectors<T, V> {\n      const /** @type {?} */ selectIds = (state: EntityState<T>) => state.ids;\n      const /** @type {?} */ selectEntities = (state: EntityState<T>) => state.entities;\n      const /** @type {?} */ selectAll = createSelector(\n        selectIds,\n        selectEntities,\n        (ids, entities) => ids.map(id => entities[id])\n      );\n\n      const /** @type {?} */ selectTotal = createSelector(selectIds, ids => ids.length);\n\n      return {\n        selectIds: createSelector(selectState, selectIds),\n        selectEntities: createSelector(selectState, selectEntities),\n        selectAll: createSelector(selectState, selectAll),\n        selectTotal: createSelector(selectState, selectTotal),\n      };\n    },\n  };\n}\n","import { EntityState } from './models';\n/**\n * @template V\n * @return {?}\n */\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n/**\n * @template V\n * @return {?}\n */\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n/**\n * @param {?=} additionalState\n * @return {?}\n */\nfunction getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n"],"names":[],"mappings":"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"}