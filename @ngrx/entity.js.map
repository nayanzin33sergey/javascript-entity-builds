{"version":3,"file":"entity.js","sources":["../../../modules/entity/index.ts","../../../modules/entity/src/create_adapter.ts","../../../modules/entity/src/sorted_state_adapter.ts","../../../modules/entity/src/unsorted_state_adapter.ts","../../../modules/entity/src/state_adapter.ts","../../../modules/entity/src/state_selectors.ts","../../../modules/entity/src/entity_state.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {createEntityAdapter,EntityState,EntityAdapter} from './public_api';\n","import { createSelector } from '@ngrx/store';\nimport {\n  EntityDefinition,\n  Comparer,\n  IdSelector,\n  EntityAdapter,\n} from './models';\nimport { createInitialStateFactory } from './entity_state';\nimport { createSelectorsFactory } from './state_selectors';\nimport { createSortedStateAdapter } from './sorted_state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?=} options\n * @return {?}\n */\nexport function createEntityAdapter<T>(\n  options: {\n    selectId?: IdSelector<T>;\n    sortComparer?: false | Comparer<T>;\n  } = {}\n): EntityAdapter<T> {\n  const { selectId, sortComparer }: EntityDefinition<T> = {\n    sortComparer: false,\n    selectId: (instance: any) => instance.id,\n    ...options,\n  };\n\n  const /** @type {?} */ stateFactory = createInitialStateFactory<T>();\n  const /** @type {?} */ selectorsFactory = createSelectorsFactory<T>();\n  const /** @type {?} */ stateAdapter = sortComparer\n    ? createSortedStateAdapter(selectId, sortComparer)\n    : createUnsortedStateAdapter(selectId);\n\n  return {\n    ...stateFactory,\n    ...selectorsFactory,\n    ...stateAdapter,\n  };\n}\n","import {\n  EntityState,\n  IdSelector,\n  Comparer,\n  Dictionary,\n  EntityStateAdapter,\n  Update,\n} from './models';\nimport { createStateOperator } from './state_adapter';\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @param {?} sort\n * @return {?}\n */\nexport function createSortedStateAdapter<T>(\n  selectId: IdSelector<T>,\n  sort: Comparer<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\n    selectId\n  );\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    const /** @type {?} */ insertAt = findTargetIndex(state, entity);\n    state.ids.splice(insertAt, 0, key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n/**\n * @param {?} newModels\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(newModels: T[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in newModels) {\n      didMutate = addOneMutably(newModels[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} models\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(models: T[], state: R): boolean {\n    const /** @type {?} */ sortedModels = models.sort(sort);\n\n    state.entities = {};\n    state.ids = sortedModels.map(model => {\n      const /** @type {?} */ id = selectId(model);\n      state.entities[id] = model;\n      return id;\n    });\n\n    return true;\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ updatedKey = selectId(updated);\n    const /** @type {?} */ result = sort(original, updated);\n\n    if (result === 0) {\n      if (updatedKey !== update.id) {\n        delete state.entities[update.id];\n        const /** @type {?} */ index = state.ids.indexOf(update.id);\n        state.ids[index] = updatedKey;\n      }\n\n      state.entities[updatedKey] = updated;\n\n      return true;\n    }\n\n    const /** @type {?} */ index = state.ids.indexOf(update.id);\n    state.ids.splice(index, 1);\n    state.ids.splice(findTargetIndex(state, updated), 0, updatedKey);\n\n    if (updatedKey !== update.id) {\n      delete state.entities[update.id];\n    }\n\n    state.entities[updatedKey] = updated;\n\n    return true;\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in updates) {\n      didMutate = updateOneMutably(updates[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} state\n * @param {?} model\n * @return {?}\n */\nfunction findTargetIndex(state: R, model: T) {\n    if (state.ids.length === 0) {\n      return 0;\n    }\n\n    for (let /** @type {?} */ i = 0; i < state.ids.length; i++) {\n      const /** @type {?} */ entity = state.entities[state.ids[i]];\n      const /** @type {?} */ isSmaller = sort(model, entity) < 0;\n\n      if (isSmaller) {\n        return i;\n      }\n    }\n\n    return state.ids.length - 1;\n  }\n\n  return {\n    removeOne,\n    removeMany,\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    addAll: createStateOperator(addAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter, IdSelector, Update } from './models';\nimport { createStateOperator } from './state_adapter';\n/**\n * @template T\n * @param {?} selectId\n * @return {?}\n */\nexport function createUnsortedStateAdapter<T>(\n  selectId: IdSelector<T>\n): EntityStateAdapter<T> {\n  type R = EntityState<T>;\n/**\n * @param {?} entity\n * @param {?} state\n * @return {?}\n */\nfunction addOneMutably(entity: T, state: R): boolean {\n    const /** @type {?} */ key = selectId(entity);\n\n    if (key in state.entities) {\n      return false;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n\n    return true;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addManyMutably(entities: T[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in entities) {\n      didMutate = addOneMutably(entities[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @param {?} entities\n * @param {?} state\n * @return {?}\n */\nfunction addAllMutably(entities: T[], state: R): boolean {\n    state.ids = [];\n    state.entities = {};\n\n    addManyMutably(entities, state);\n\n    return true;\n  }\n/**\n * @param {?} key\n * @param {?} state\n * @return {?}\n */\nfunction removeOneMutably(key: string, state: R): boolean {\n    const /** @type {?} */ index = state.ids.indexOf(key);\n\n    if (index === -1) {\n      return false;\n    }\n\n    state.ids.splice(index, 1);\n    delete state.entities[key];\n\n    return true;\n  }\n/**\n * @param {?} keys\n * @param {?} state\n * @return {?}\n */\nfunction removeManyMutably(keys: string[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in keys) {\n      didMutate = removeOneMutably(keys[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n/**\n * @template S\n * @param {?} state\n * @return {?}\n */\nfunction removeAll<S extends R>(state: S): S {\n    return Object.assign({}, state, {\n      ids: [],\n      entities: {},\n    });\n  }\n/**\n * @param {?} update\n * @param {?} state\n * @return {?}\n */\nfunction updateOneMutably(update: Update<T>, state: R): boolean {\n    const /** @type {?} */ index = state.ids.indexOf(update.id);\n\n    if (index === -1) {\n      return false;\n    }\n\n    const /** @type {?} */ original = state.entities[update.id];\n    const /** @type {?} */ updated: T = Object.assign({}, original, update.changes);\n    const /** @type {?} */ newKey = selectId(updated);\n\n    if (newKey !== update.id) {\n      state.ids[index] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n\n    return true;\n  }\n/**\n * @param {?} updates\n * @param {?} state\n * @return {?}\n */\nfunction updateManyMutably(updates: Update<T>[], state: R): boolean {\n    let /** @type {?} */ didMutate = false;\n\n    for (let /** @type {?} */ index in updates) {\n      didMutate = updateOneMutably(updates[index], state) || didMutate;\n    }\n\n    return didMutate;\n  }\n\n  return {\n    removeAll,\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    addAll: createStateOperator(addAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably),\n  };\n}\n","import { EntityState, EntityStateAdapter } from './models';\n/**\n * @template V, R\n * @param {?} mutator\n * @return {?}\n */\nexport function createStateOperator<V, R>(\n  mutator: (arg: R, state: EntityState<V>) => boolean\n) {\n  return function operation<S extends EntityState<V>>(arg: R, state: S): S {\n    const /** @type {?} */ clonedEntityState: EntityState<V> = {\n      ids: [...state.ids],\n      entities: { ...state.entities },\n    };\n\n    const /** @type {?} */ didMutate = mutator(arg, clonedEntityState);\n\n    if (didMutate) {\n      return Object.assign({}, state, clonedEntityState);\n    }\n\n    return state;\n  };\n}\n","import { createSelector } from '@ngrx/store';\nimport { EntityState, EntitySelectors } from './models';\n/**\n * @template T\n * @return {?}\n */\nexport function createSelectorsFactory<T>() {\n  return {\n/**\n * @template V\n * @param {?} selectState\n * @return {?}\n */\ngetSelectors<V>(\n      selectState: (state: V) => EntityState<T>\n    ): EntitySelectors<T, V> {\n      const /** @type {?} */ selectIds = (state: EntityState<T>) => state.ids;\n      const /** @type {?} */ selectEntities = (state: EntityState<T>) => state.entities;\n      const /** @type {?} */ selectAll = createSelector(\n        selectIds,\n        selectEntities,\n        (ids, entities) => ids.map(id => entities[id])\n      );\n\n      const /** @type {?} */ selectTotal = createSelector(selectIds, ids => ids.length);\n\n      return {\n        selectIds: createSelector(selectState, selectIds),\n        selectEntities: createSelector(selectState, selectEntities),\n        selectAll: createSelector(selectState, selectAll),\n        selectTotal: createSelector(selectState, selectTotal),\n      };\n    },\n  };\n}\n","import { EntityState } from './models';\n/**\n * @template V\n * @return {?}\n */\nexport function getInitialEntityState<V>(): EntityState<V> {\n  return {\n    ids: [],\n    entities: {},\n  };\n}\n/**\n * @template V\n * @return {?}\n */\nexport function createInitialStateFactory<V>() {\n  function getInitialState(): EntityState<V>;\n  function getInitialState<S extends object>(\n    additionalState: S\n  ): EntityState<V> & S;\n/**\n * @param {?=} additionalState\n * @return {?}\n */\nfunction getInitialState(additionalState: any = {}): any {\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return { getInitialState };\n}\n"],"names":[],"mappings":"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"}